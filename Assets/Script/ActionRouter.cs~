
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using Newtonsoft.Json;
using System.Dynamic;

public class ActionRouter : MonoBehaviour
{
    #region SETUP_AREA
    private Dictionary<string, Action<dynamic>> funcDict;
    public void HandleAction(string data)
    {
        // Dictionary<string,string> dict = JsonConvert.DeserializeObject<Dictionary<string, string>>(data);
        var obj = JsonConvert.DeserializeObject<dynamic>(data);
        string cmd = obj["msg"].ToString();
        funcDict[cmd](obj["data"]);
    }
    #endregion
    void Start()
    {
        funcDict = new Dictionary<string, Action<dynamic>>(){
            { "UPDATE_PLAYER", UpdatePlayerHandle },
            { "NEW_ROOM", UpdateRoomHandle },
            { "UPDATE_ROOM", UpdateRoomHandle },
            { "JOIN_ROOM", JoinRoomHandle },
        };
    }
    public GameInfoHolder gameInfoHolder;
    public GameLobbyController gameLobbyController;
    void UpdateRoomHandle(dynamic data)
    {
        List<PlayerInfo> pInfos = new List<PlayerInfo>();
        // GameObject.Find("RoomcodeDisplay").GetComponent<Text>.text = data["id"].ToString();
        int pCount = int.Parse(data["memberCount"].ToString());
        //extract player info
        for (int i = 0; i < pCount; i++)
        {
            pInfos.Add(new PlayerInfo());
            Debug.Log(data["players"][i.ToString()]["id"].ToString());
            pInfos[i].index = i;
            pInfos[i].playerId = data["players"][i.ToString()]["id"].ToString();
            pInfos[i].playerName = data["players"][i.ToString()]["name"].ToString();
        }
        //update info and display
        Debug.Log(pInfos.ToArray().Length);
        gameInfoHolder.SetPlayerInfo(pInfos);
        gameLobbyController.UpdateRoomInfo(pInfos.ToArray());
        PanelChangeController.pccInstance.GotoPanel(2);
        NotiPanelControl.notiPanelInstance.CloseNotification();
    }
    void JoinRoomHandle(dynamic data)
    {
        Debug.Log(data);
    }
    IEnumerator ExecUpdatePlayer()
    {
        yield return new WaitForSeconds(0.2f);
    }
    void UpdatePlayerHandle(dynamic data)
    {
        Debug.Log(data);
        if (data == null || data["id"] == null) return;
        if (gameInfoHolder.mainPlayerInfo == null) gameInfoHolder.mainPlayerInfo = new PlayerInfo();
        gameInfoHolder.mainPlayerInfo.playerId = data["id"].ToString();
        gameInfoHolder.mainPlayerInfo.playerName = data["name"].ToString();
        gameInfoHolder.mainPlayerInfo.colorCode = int.Parse(data["color"].ToString());
        gameInfoHolder.UpdatePlayerInfoDisplay();
        StartCoroutine("ExecUpdatePlayer");
    }
}